# -*- coding: utf-8 -*-
"""Linear Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TQRLD9O5Pi7vboW5hN9gdMw1pELbPb3Q
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

"""Load **Dataset**"""

data = fetch_california_housing(as_frame=True)
df = data.frame
df.head()

"""Correlation **Heatmap**"""

plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Correlation Heatmap")
plt.show()

"""**Histogram of Target Variable**"""

plt.hist(df['MedHouseVal'], bins=30, color='skyblue')
plt.title("Distribution of Median House Value")
plt.xlabel("Median House Value")
plt.ylabel("Frequency")
plt.show()

""" **Feature vs Target**"""

sns.scatterplot(x=df['MedInc'], y=df['MedHouseVal'])
plt.title("Median Income vs House Value")
plt.xlabel("Median Income")
plt.ylabel("House Value")
plt.show()

"""**Feature Selection**"""

features_set = [
    ['MedInc', 'HouseAge'],                      # Set 1
    ['MedInc', 'AveRooms', 'HouseAge'],          # Set 2
    ['MedInc', 'AveRooms', 'AveOccup', 'Latitude', 'Longitude'],  # Set 3
    data.feature_names                           # Full Set
]

"""**Model Training and Evaluation**"""

results = []

for features in features_set:
    X = df[features]
    y = df['MedHouseVal']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = LinearRegression()
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    results.append({'features': features, 'MSE': mse, 'RÂ²': r2})

    # Plot predicted vs actual
    plt.scatter(y_test, y_pred, alpha=0.5)
    plt.xlabel("Actual House Value")
    plt.ylabel("Predicted House Value")
    plt.title(f"Actual vs Predicted ({features})")
    plt.grid(True)
    plt.show()

# Display results
pd.DataFrame(results)

